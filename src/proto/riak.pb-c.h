/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: riak.proto */

#ifndef PROTOBUF_C_riak_2eproto__INCLUDED
#define PROTOBUF_C_riak_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1000002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _RpbErrorResp RpbErrorResp;
typedef struct _RpbGetServerInfoResp RpbGetServerInfoResp;
typedef struct _RpbPair RpbPair;
typedef struct _RpbGetBucketReq RpbGetBucketReq;
typedef struct _RpbGetBucketResp RpbGetBucketResp;
typedef struct _RpbSetBucketReq RpbSetBucketReq;
typedef struct _RpbResetBucketReq RpbResetBucketReq;
typedef struct _RpbGetBucketTypeReq RpbGetBucketTypeReq;
typedef struct _RpbSetBucketTypeReq RpbSetBucketTypeReq;
typedef struct _RpbModFun RpbModFun;
typedef struct _RpbCommitHook RpbCommitHook;
typedef struct _RpbBucketProps RpbBucketProps;
typedef struct _RpbAuthReq RpbAuthReq;


/* --- enums --- */

typedef enum _RpbBucketProps__RpbReplMode {
  RPB_BUCKET_PROPS__RPB_REPL_MODE__FALSE = 0,
  RPB_BUCKET_PROPS__RPB_REPL_MODE__REALTIME = 1,
  RPB_BUCKET_PROPS__RPB_REPL_MODE__FULLSYNC = 2,
  RPB_BUCKET_PROPS__RPB_REPL_MODE__TRUE = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(RPB_BUCKET_PROPS__RPB_REPL_MODE)
} RpbBucketProps__RpbReplMode;

/* --- messages --- */

struct  _RpbErrorResp
{
  ProtobufCMessage base;
  ProtobufCBinaryData errmsg;
  uint32_t errcode;
};
#define RPB_ERROR_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpb_error_resp__descriptor) \
    , {0,NULL}, 0 }


struct  _RpbGetServerInfoResp
{
  ProtobufCMessage base;
  protobuf_c_boolean has_node;
  ProtobufCBinaryData node;
  protobuf_c_boolean has_server_version;
  ProtobufCBinaryData server_version;
};
#define RPB_GET_SERVER_INFO_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpb_get_server_info_resp__descriptor) \
    , 0,{0,NULL}, 0,{0,NULL} }


struct  _RpbPair
{
  ProtobufCMessage base;
  ProtobufCBinaryData key;
  protobuf_c_boolean has_value;
  ProtobufCBinaryData value;
};
#define RPB_PAIR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpb_pair__descriptor) \
    , {0,NULL}, 0,{0,NULL} }


struct  _RpbGetBucketReq
{
  ProtobufCMessage base;
  ProtobufCBinaryData bucket;
  protobuf_c_boolean has_type;
  ProtobufCBinaryData type;
};
#define RPB_GET_BUCKET_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpb_get_bucket_req__descriptor) \
    , {0,NULL}, 0,{0,NULL} }


struct  _RpbGetBucketResp
{
  ProtobufCMessage base;
  RpbBucketProps *props;
};
#define RPB_GET_BUCKET_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpb_get_bucket_resp__descriptor) \
    , NULL }


struct  _RpbSetBucketReq
{
  ProtobufCMessage base;
  ProtobufCBinaryData bucket;
  RpbBucketProps *props;
  protobuf_c_boolean has_type;
  ProtobufCBinaryData type;
};
#define RPB_SET_BUCKET_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpb_set_bucket_req__descriptor) \
    , {0,NULL}, NULL, 0,{0,NULL} }


struct  _RpbResetBucketReq
{
  ProtobufCMessage base;
  ProtobufCBinaryData bucket;
  protobuf_c_boolean has_type;
  ProtobufCBinaryData type;
};
#define RPB_RESET_BUCKET_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpb_reset_bucket_req__descriptor) \
    , {0,NULL}, 0,{0,NULL} }


struct  _RpbGetBucketTypeReq
{
  ProtobufCMessage base;
  ProtobufCBinaryData type;
};
#define RPB_GET_BUCKET_TYPE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpb_get_bucket_type_req__descriptor) \
    , {0,NULL} }


struct  _RpbSetBucketTypeReq
{
  ProtobufCMessage base;
  ProtobufCBinaryData type;
  RpbBucketProps *props;
};
#define RPB_SET_BUCKET_TYPE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpb_set_bucket_type_req__descriptor) \
    , {0,NULL}, NULL }


struct  _RpbModFun
{
  ProtobufCMessage base;
  ProtobufCBinaryData module;
  ProtobufCBinaryData function;
};
#define RPB_MOD_FUN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpb_mod_fun__descriptor) \
    , {0,NULL}, {0,NULL} }


struct  _RpbCommitHook
{
  ProtobufCMessage base;
  RpbModFun *modfun;
  protobuf_c_boolean has_name;
  ProtobufCBinaryData name;
};
#define RPB_COMMIT_HOOK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpb_commit_hook__descriptor) \
    , NULL, 0,{0,NULL} }


struct  _RpbBucketProps
{
  ProtobufCMessage base;
  protobuf_c_boolean has_n_val;
  uint32_t n_val;
  protobuf_c_boolean has_allow_mult;
  protobuf_c_boolean allow_mult;
  protobuf_c_boolean has_last_write_wins;
  protobuf_c_boolean last_write_wins;
  size_t n_precommit;
  RpbCommitHook **precommit;
  protobuf_c_boolean has_has_precommit;
  protobuf_c_boolean has_precommit;
  size_t n_postcommit;
  RpbCommitHook **postcommit;
  protobuf_c_boolean has_has_postcommit;
  protobuf_c_boolean has_postcommit;
  RpbModFun *chash_keyfun;
  RpbModFun *linkfun;
  protobuf_c_boolean has_old_vclock;
  uint32_t old_vclock;
  protobuf_c_boolean has_young_vclock;
  uint32_t young_vclock;
  protobuf_c_boolean has_big_vclock;
  uint32_t big_vclock;
  protobuf_c_boolean has_small_vclock;
  uint32_t small_vclock;
  protobuf_c_boolean has_pr;
  uint32_t pr;
  protobuf_c_boolean has_r;
  uint32_t r;
  protobuf_c_boolean has_w;
  uint32_t w;
  protobuf_c_boolean has_pw;
  uint32_t pw;
  protobuf_c_boolean has_dw;
  uint32_t dw;
  protobuf_c_boolean has_rw;
  uint32_t rw;
  protobuf_c_boolean has_basic_quorum;
  protobuf_c_boolean basic_quorum;
  protobuf_c_boolean has_notfound_ok;
  protobuf_c_boolean notfound_ok;
  protobuf_c_boolean has_backend;
  ProtobufCBinaryData backend;
  protobuf_c_boolean has_search;
  protobuf_c_boolean search;
  protobuf_c_boolean has_repl;
  RpbBucketProps__RpbReplMode repl;
  protobuf_c_boolean has_search_index;
  ProtobufCBinaryData search_index;
  protobuf_c_boolean has_datatype;
  ProtobufCBinaryData datatype;
};
#define RPB_BUCKET_PROPS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpb_bucket_props__descriptor) \
    , 0,0, 0,0, 0,0, 0,NULL, 0,0, 0,NULL, 0,0, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,{0,NULL}, 0,0, 0,0, 0,{0,NULL}, 0,{0,NULL} }


struct  _RpbAuthReq
{
  ProtobufCMessage base;
  ProtobufCBinaryData user;
  ProtobufCBinaryData password;
};
#define RPB_AUTH_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpb_auth_req__descriptor) \
    , {0,NULL}, {0,NULL} }


/* RpbErrorResp methods */
void   rpb_error_resp__init
                     (RpbErrorResp         *message);
size_t rpb_error_resp__get_packed_size
                     (const RpbErrorResp   *message);
size_t rpb_error_resp__pack
                     (const RpbErrorResp   *message,
                      uint8_t             *out);
size_t rpb_error_resp__pack_to_buffer
                     (const RpbErrorResp   *message,
                      ProtobufCBuffer     *buffer);
RpbErrorResp *
       rpb_error_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpb_error_resp__free_unpacked
                     (RpbErrorResp *message,
                      ProtobufCAllocator *allocator);
/* RpbGetServerInfoResp methods */
void   rpb_get_server_info_resp__init
                     (RpbGetServerInfoResp         *message);
size_t rpb_get_server_info_resp__get_packed_size
                     (const RpbGetServerInfoResp   *message);
size_t rpb_get_server_info_resp__pack
                     (const RpbGetServerInfoResp   *message,
                      uint8_t             *out);
size_t rpb_get_server_info_resp__pack_to_buffer
                     (const RpbGetServerInfoResp   *message,
                      ProtobufCBuffer     *buffer);
RpbGetServerInfoResp *
       rpb_get_server_info_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpb_get_server_info_resp__free_unpacked
                     (RpbGetServerInfoResp *message,
                      ProtobufCAllocator *allocator);
/* RpbPair methods */
void   rpb_pair__init
                     (RpbPair         *message);
size_t rpb_pair__get_packed_size
                     (const RpbPair   *message);
size_t rpb_pair__pack
                     (const RpbPair   *message,
                      uint8_t             *out);
size_t rpb_pair__pack_to_buffer
                     (const RpbPair   *message,
                      ProtobufCBuffer     *buffer);
RpbPair *
       rpb_pair__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpb_pair__free_unpacked
                     (RpbPair *message,
                      ProtobufCAllocator *allocator);
/* RpbGetBucketReq methods */
void   rpb_get_bucket_req__init
                     (RpbGetBucketReq         *message);
size_t rpb_get_bucket_req__get_packed_size
                     (const RpbGetBucketReq   *message);
size_t rpb_get_bucket_req__pack
                     (const RpbGetBucketReq   *message,
                      uint8_t             *out);
size_t rpb_get_bucket_req__pack_to_buffer
                     (const RpbGetBucketReq   *message,
                      ProtobufCBuffer     *buffer);
RpbGetBucketReq *
       rpb_get_bucket_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpb_get_bucket_req__free_unpacked
                     (RpbGetBucketReq *message,
                      ProtobufCAllocator *allocator);
/* RpbGetBucketResp methods */
void   rpb_get_bucket_resp__init
                     (RpbGetBucketResp         *message);
size_t rpb_get_bucket_resp__get_packed_size
                     (const RpbGetBucketResp   *message);
size_t rpb_get_bucket_resp__pack
                     (const RpbGetBucketResp   *message,
                      uint8_t             *out);
size_t rpb_get_bucket_resp__pack_to_buffer
                     (const RpbGetBucketResp   *message,
                      ProtobufCBuffer     *buffer);
RpbGetBucketResp *
       rpb_get_bucket_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpb_get_bucket_resp__free_unpacked
                     (RpbGetBucketResp *message,
                      ProtobufCAllocator *allocator);
/* RpbSetBucketReq methods */
void   rpb_set_bucket_req__init
                     (RpbSetBucketReq         *message);
size_t rpb_set_bucket_req__get_packed_size
                     (const RpbSetBucketReq   *message);
size_t rpb_set_bucket_req__pack
                     (const RpbSetBucketReq   *message,
                      uint8_t             *out);
size_t rpb_set_bucket_req__pack_to_buffer
                     (const RpbSetBucketReq   *message,
                      ProtobufCBuffer     *buffer);
RpbSetBucketReq *
       rpb_set_bucket_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpb_set_bucket_req__free_unpacked
                     (RpbSetBucketReq *message,
                      ProtobufCAllocator *allocator);
/* RpbResetBucketReq methods */
void   rpb_reset_bucket_req__init
                     (RpbResetBucketReq         *message);
size_t rpb_reset_bucket_req__get_packed_size
                     (const RpbResetBucketReq   *message);
size_t rpb_reset_bucket_req__pack
                     (const RpbResetBucketReq   *message,
                      uint8_t             *out);
size_t rpb_reset_bucket_req__pack_to_buffer
                     (const RpbResetBucketReq   *message,
                      ProtobufCBuffer     *buffer);
RpbResetBucketReq *
       rpb_reset_bucket_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpb_reset_bucket_req__free_unpacked
                     (RpbResetBucketReq *message,
                      ProtobufCAllocator *allocator);
/* RpbGetBucketTypeReq methods */
void   rpb_get_bucket_type_req__init
                     (RpbGetBucketTypeReq         *message);
size_t rpb_get_bucket_type_req__get_packed_size
                     (const RpbGetBucketTypeReq   *message);
size_t rpb_get_bucket_type_req__pack
                     (const RpbGetBucketTypeReq   *message,
                      uint8_t             *out);
size_t rpb_get_bucket_type_req__pack_to_buffer
                     (const RpbGetBucketTypeReq   *message,
                      ProtobufCBuffer     *buffer);
RpbGetBucketTypeReq *
       rpb_get_bucket_type_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpb_get_bucket_type_req__free_unpacked
                     (RpbGetBucketTypeReq *message,
                      ProtobufCAllocator *allocator);
/* RpbSetBucketTypeReq methods */
void   rpb_set_bucket_type_req__init
                     (RpbSetBucketTypeReq         *message);
size_t rpb_set_bucket_type_req__get_packed_size
                     (const RpbSetBucketTypeReq   *message);
size_t rpb_set_bucket_type_req__pack
                     (const RpbSetBucketTypeReq   *message,
                      uint8_t             *out);
size_t rpb_set_bucket_type_req__pack_to_buffer
                     (const RpbSetBucketTypeReq   *message,
                      ProtobufCBuffer     *buffer);
RpbSetBucketTypeReq *
       rpb_set_bucket_type_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpb_set_bucket_type_req__free_unpacked
                     (RpbSetBucketTypeReq *message,
                      ProtobufCAllocator *allocator);
/* RpbModFun methods */
void   rpb_mod_fun__init
                     (RpbModFun         *message);
size_t rpb_mod_fun__get_packed_size
                     (const RpbModFun   *message);
size_t rpb_mod_fun__pack
                     (const RpbModFun   *message,
                      uint8_t             *out);
size_t rpb_mod_fun__pack_to_buffer
                     (const RpbModFun   *message,
                      ProtobufCBuffer     *buffer);
RpbModFun *
       rpb_mod_fun__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpb_mod_fun__free_unpacked
                     (RpbModFun *message,
                      ProtobufCAllocator *allocator);
/* RpbCommitHook methods */
void   rpb_commit_hook__init
                     (RpbCommitHook         *message);
size_t rpb_commit_hook__get_packed_size
                     (const RpbCommitHook   *message);
size_t rpb_commit_hook__pack
                     (const RpbCommitHook   *message,
                      uint8_t             *out);
size_t rpb_commit_hook__pack_to_buffer
                     (const RpbCommitHook   *message,
                      ProtobufCBuffer     *buffer);
RpbCommitHook *
       rpb_commit_hook__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpb_commit_hook__free_unpacked
                     (RpbCommitHook *message,
                      ProtobufCAllocator *allocator);
/* RpbBucketProps methods */
void   rpb_bucket_props__init
                     (RpbBucketProps         *message);
size_t rpb_bucket_props__get_packed_size
                     (const RpbBucketProps   *message);
size_t rpb_bucket_props__pack
                     (const RpbBucketProps   *message,
                      uint8_t             *out);
size_t rpb_bucket_props__pack_to_buffer
                     (const RpbBucketProps   *message,
                      ProtobufCBuffer     *buffer);
RpbBucketProps *
       rpb_bucket_props__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpb_bucket_props__free_unpacked
                     (RpbBucketProps *message,
                      ProtobufCAllocator *allocator);
/* RpbAuthReq methods */
void   rpb_auth_req__init
                     (RpbAuthReq         *message);
size_t rpb_auth_req__get_packed_size
                     (const RpbAuthReq   *message);
size_t rpb_auth_req__pack
                     (const RpbAuthReq   *message,
                      uint8_t             *out);
size_t rpb_auth_req__pack_to_buffer
                     (const RpbAuthReq   *message,
                      ProtobufCBuffer     *buffer);
RpbAuthReq *
       rpb_auth_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpb_auth_req__free_unpacked
                     (RpbAuthReq *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*RpbErrorResp_Closure)
                 (const RpbErrorResp *message,
                  void *closure_data);
typedef void (*RpbGetServerInfoResp_Closure)
                 (const RpbGetServerInfoResp *message,
                  void *closure_data);
typedef void (*RpbPair_Closure)
                 (const RpbPair *message,
                  void *closure_data);
typedef void (*RpbGetBucketReq_Closure)
                 (const RpbGetBucketReq *message,
                  void *closure_data);
typedef void (*RpbGetBucketResp_Closure)
                 (const RpbGetBucketResp *message,
                  void *closure_data);
typedef void (*RpbSetBucketReq_Closure)
                 (const RpbSetBucketReq *message,
                  void *closure_data);
typedef void (*RpbResetBucketReq_Closure)
                 (const RpbResetBucketReq *message,
                  void *closure_data);
typedef void (*RpbGetBucketTypeReq_Closure)
                 (const RpbGetBucketTypeReq *message,
                  void *closure_data);
typedef void (*RpbSetBucketTypeReq_Closure)
                 (const RpbSetBucketTypeReq *message,
                  void *closure_data);
typedef void (*RpbModFun_Closure)
                 (const RpbModFun *message,
                  void *closure_data);
typedef void (*RpbCommitHook_Closure)
                 (const RpbCommitHook *message,
                  void *closure_data);
typedef void (*RpbBucketProps_Closure)
                 (const RpbBucketProps *message,
                  void *closure_data);
typedef void (*RpbAuthReq_Closure)
                 (const RpbAuthReq *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor rpb_error_resp__descriptor;
extern const ProtobufCMessageDescriptor rpb_get_server_info_resp__descriptor;
extern const ProtobufCMessageDescriptor rpb_pair__descriptor;
extern const ProtobufCMessageDescriptor rpb_get_bucket_req__descriptor;
extern const ProtobufCMessageDescriptor rpb_get_bucket_resp__descriptor;
extern const ProtobufCMessageDescriptor rpb_set_bucket_req__descriptor;
extern const ProtobufCMessageDescriptor rpb_reset_bucket_req__descriptor;
extern const ProtobufCMessageDescriptor rpb_get_bucket_type_req__descriptor;
extern const ProtobufCMessageDescriptor rpb_set_bucket_type_req__descriptor;
extern const ProtobufCMessageDescriptor rpb_mod_fun__descriptor;
extern const ProtobufCMessageDescriptor rpb_commit_hook__descriptor;
extern const ProtobufCMessageDescriptor rpb_bucket_props__descriptor;
extern const ProtobufCEnumDescriptor    rpb_bucket_props__rpb_repl_mode__descriptor;
extern const ProtobufCMessageDescriptor rpb_auth_req__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_riak_2eproto__INCLUDED */
